@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@{
    var viewModel = "@model " + Model.ViewDataTypeName.Split('.')[Model.ViewDataTypeName.Split('.').Length - 1] + "Model";
    var viewDataTypeName = Model.ViewDataTypeName.Split('.')[Model.ViewDataTypeName.Split('.').Length - 1];
}
@viewModel

@@* Generated from Custom Template. *@@
@@* Model namespace using directive should be added to _ViewImports.cshtml. *@@

@{
@:@@{
    @:var containerDivClass = "container";
@:}
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@viewDataTypeName Delete";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<div class="@@containerDivClass">
    @:<h1>@@ViewData["Title"]</h1>
    @:<hr />
@:</div>
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@viewDataTypeName Delete</title>
@:</head>
@:<body>
    }
}
@{
@:@@if (Model is not null)
@:{
@:<div class="@@containerDivClass">
    @:@@if (TempData["Message"] is not null)
    @:{
    @:<p class="text-danger">
        @:@@TempData["Message"]
    @:</p>
    @:}
    @:<h3 class="text-danger">Are you sure you want to delete?</h3>
    @:<hr />
Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
{
    if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
        && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
    {
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(property))
        </div>
    </div>
    }
    else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
    {
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            @@Html.DisplayNameFor(model => model.@GetValueExpression(navigation))
        </div>
        <div class="col-10">
            @@Html.DisplayFor(model => model.@GetValueExpression(navigation))
        </div>
    </div>
    }
}
@:
@:@@* Can be uncommented and used for many to many relationships. ManyToManyRecord may be replaced with the related entiy name in the controller and views. *@@
    @:@@*
    <div class="row mb-3">
        <div class="col-2 fw-bold">
            <b>@@Html.DisplayNameFor(model => model.ManyToManyRecords)</b>
        </div>
        <div class="col-10">
            @@Html.Raw(Model.ManyToManyRecords)
        </div>
    </div>
    @:*@@
@:
    @:<hr />
    @:<form asp-action="@Model.ViewName">
	    @:@@Html.AntiForgeryToken()
        foreach (var property in Model.ModelMetadata.Properties)
        {
            if(property.IsPrimaryKey)
            {
        @:<input type="hidden" asp-for="Record.@GetValueExpression(property)" />
            }
        }
        @:<input type="submit" value="Yes" class="btn btn-danger" />&nbsp;&nbsp;
        @:<a asp-action="Index" class="btn btn-outline-danger">No</a>
    @:</form>
@:</div>
@:}
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}