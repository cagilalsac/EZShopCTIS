@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable

}
}
using Microsoft.AspNetCore.Mvc;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Services");
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Models");
    }
}

// Generated from Custom Template.

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;

    var serviceAbstractType = "I" + Model.ModelTypeName + "Service";
    var serviceAbstractName = Model.ModelVariable + "Service";
    var modelType = Model.ModelTypeName + "Model";
}
    [Route("api/[controller]")]
    [ApiController]
    public class @Model.ControllerName : ControllerBase
    {
        // Service injections:
        private readonly @serviceAbstractType @("_" + serviceAbstractName);

        public @(Model.ControllerName + "(" + serviceAbstractType + " " + serviceAbstractName))
        {
            @("_" + serviceAbstractName) = @serviceAbstractName;
        }

        // GET: @routePrefix
        [HttpGet]
        public IActionResult Get()
        {
            // Get collection service logic:
            var list = @("_" + serviceAbstractName).Query().ToList();
            return Ok(list);
        }

        // GET: @routePrefix/5
        [HttpGet("{id}")]
        public IActionResult Get(@primaryKeyShortTypeName id)
        {
            // Get item service logic:
            var item = @("_" + serviceAbstractName).Query().SingleOrDefault(q => q.Id == id);
            if (item is null)
                return NotFound();
            return Ok(item);
        }

		// POST: @routePrefix
        [HttpPost]
        public IActionResult Post(@modelType @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
                // Insert item service logic:
                var result = @("_" + serviceAbstractName).Create(@(Model.ModelVariable).Record);
                if (result.IsSuccessful)
                {
                    //return CreatedAtAction(nameof(Get), new { id = @(Model.ModelVariable).Record.Id }, @(Model.ModelVariable).Record);
                    return Ok(@Model.ModelVariable);
                }
                ModelState.AddModelError("@(Model.ModelTypeName + "Post")", result.Message);
            }
            return BadRequest(ModelState);
        }

        // PUT: @routePrefix
        [HttpPut]
        public IActionResult Put(@modelType @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
                // Update item service logic:
                var result = @("_" + serviceAbstractName).Update(@(Model.ModelVariable).Record);
                if (result.IsSuccessful)
                {
                    //return NoContent();
                    return Ok(@Model.ModelVariable);
                }
                ModelState.AddModelError("@(Model.ModelTypeName + "Put")", result.Message);
            }
            return BadRequest(ModelState);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
        public IActionResult Delete(@primaryKeyShortTypeName id)
        {
            // Delete item service logic:
            var result = @("_" + serviceAbstractName).Delete(id);
            if (result.IsSuccessful)
                return NoContent();
            ModelState.AddModelError("@(Model.ModelTypeName + "Delete")", result.Message);
            return BadRequest(ModelState);
        }
	}
}