@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@{
if (@Model.NullableEnabled)
{
@:#nullable disable

}
}
@using System.Collections.Generic;
@using System.Linq;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Controllers.Bases");
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Services");
@:using @(namespaceName.Remove(namespaceName.LastIndexOf('.')) + ".Models");
    }
}

// Generated from Custom Template.

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
    var bindString = string.Join(",", modelProperties);
    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach (var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }

    var inlineIncludes = "";
    foreach (var property in relatedProperties.Values)
    {
        inlineIncludes += string.Format("{0}                .Include({1} => {1}.{2})", Environment.NewLine, lambdaVar, property.AssociationPropertyName);
    }

    if (!string.IsNullOrEmpty(Model.AreaName))
    {
    @:@string.Format("[Area(\"{0}\")]", Model.AreaName)
    }

    var modelType = Model.ModelTypeName + "Model";
    var serviceAbstractType = "I" + Model.ModelTypeName + "Service";
    var serviceAbstractName = Model.ModelVariable + "Service";
}
    public class @Model.ControllerName : MvcController
    {
        // Service injections:
        private readonly @serviceAbstractType @("_" + serviceAbstractName);
@foreach (var relatedProperty in relatedProperties.Keys)
{
        @:private readonly I@(relatedProperty + "Service _" + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service");
}

        /* Can be uncommented and used for many to many relationships. ManyToManyRecord may be replaced with the related entiy name in the controller and views. */
        //private readonly IManyToManyRecordService _ManyToManyRecordService;

        public @(Model.ControllerName + "(\n\t\t\t" + serviceAbstractType + " " + serviceAbstractName)
@foreach (var relatedProperty in relatedProperties.Keys)
{
            @:, I@(relatedProperty + "Service " + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service")
}

            /* Can be uncommented and used for many to many relationships. ManyToManyRecord may be replaced with the related entiy name in the controller and views. */
            //, IManyToManyRecordService ManyToManyRecordService
        )
        {
            @("_" + serviceAbstractName) = @serviceAbstractName;
@foreach (var relatedProperty in relatedProperties.Keys)
{
            @:@("_" + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service = " + relatedProperty.Substring(0, 1).ToLower() + relatedProperty.Substring(1) + "Service");
}

            /* Can be uncommented and used for many to many relationships. ManyToManyRecord may be replaced with the related entiy name in the controller and views. */
            //_ManyToManyRecordService = ManyToManyRecordService;
        }

        // GET: @routePrefix
        public IActionResult Index()
        {
            // Get collection service logic:
            var list = @("_" + serviceAbstractName).Query().ToList();
            return View(list);
        }

        // GET: @routePrefix/Details/5
        public IActionResult Details(@primaryKeyShortTypeName id)
        {
            // Get item service logic:
            var item = @("_" + serviceAbstractName).Query().SingleOrDefault(q => q.Record.Id == id);
            return View(item);
        }

        protected void SetViewData()
        {
            // Related items service logic to set ViewData (Record.Id and Name parameters may need to be changed in the SelectList constructor according to the model):
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_@(relatedProperties.FirstOrDefault(rp => rp.Value == property).Key.Substring(0, 1).ToLower() + relatedProperties.FirstOrDefault(rp => rp.Value == property).Key.Substring(1))Service.Query().ToList(), "Record.Id", "Name");
    }
}           
            
            /* Can be uncommented and used for many to many relationships. ManyToManyRecord may be replaced with the related entiy name in the controller and views. */
            //ViewBag.ManyToManyRecordIds = new MultiSelectList(_ManyToManyRecordService.Query().ToList(), "Record.Id", "Name");
        }

        // GET: @routePrefix/Create
        public IActionResult Create()
        {
            SetViewData();
            return View();
        }

        // POST: @routePrefix/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(@modelType @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
@{
    if (!string.IsNullOrEmpty(primaryKeyType) && IsGuid(primaryKeyType))
    {
                @:@(Model.ModelVariable).@primaryKeyName = Guid.NewGuid();
    }
                @:// Insert item service logic:
                @:var result = @("_" + serviceAbstractName).Create(@(Model.ModelVariable).Record);
                @:if (result.IsSuccessful)
}  
                {
                    TempData["Message"] = result.Message;
                    return RedirectToAction(nameof(Details), new { id = @(Model.ModelVariable).Record.Id });
                }
                ModelState.AddModelError("", result.Message);
            }
            SetViewData();
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Edit/5
        public IActionResult Edit(@primaryKeyShortTypeName id)
        {
            // Get item to edit service logic:
            var item = @("_" + serviceAbstractName).Query().SingleOrDefault(q => q.Record.Id == id);
            SetViewData();
            return View(item);
        }

        // POST: @routePrefix/Edit
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Edit(@modelType @Model.ModelVariable)
        {
            if (ModelState.IsValid)
            {
@{
                @:// Update item service logic:
                @:var result = @("_" + serviceAbstractName).Update(@(Model.ModelVariable).Record);
                @:if (result.IsSuccessful)
}
                {
                    TempData["Message"] = result.Message;
                    return RedirectToAction(nameof(Details), new { id = @(Model.ModelVariable).Record.Id });
                }
                ModelState.AddModelError("", result.Message);
            }
            SetViewData();
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Delete/5
        public IActionResult Delete(@primaryKeyShortTypeName id)
        {
            // Get item to delete service logic:
            var item = @("_" + serviceAbstractName).Query().SingleOrDefault(q => q.Record.Id == id);
            return View(item);
        }

        // POST: @routePrefix/Delete
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public IActionResult DeleteConfirmed(@primaryKeyShortTypeName id)
        {
            // Delete item service logic:
            var result = @("_" + serviceAbstractName).Delete(id);
            TempData["Message"] = result.Message;
            return RedirectToAction(nameof(Index));
        }
	}
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (!Microsoft.VisualStudio.Web.CodeGeneration.Templating.TypeUtilities.IsNullable(primaryKeyType) || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
}